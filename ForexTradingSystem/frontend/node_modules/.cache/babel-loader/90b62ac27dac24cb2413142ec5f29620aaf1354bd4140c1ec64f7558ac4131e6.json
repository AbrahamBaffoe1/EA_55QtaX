{"ast":null,"code":"var _jsxFileName = \"/Users/kwamebaffoe/Desktop/BotFles/ForexTradingSystem/frontend/src/pages/BotConfigPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchBotConfigurations, updateBotConfiguration } from '../services/apiService';\nimport BotConfigForm from '../components/BotConfigForm';\nimport styles from '../styles/botConfig.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BotConfigPage = () => {\n  _s();\n  const [bots, setBots] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const loadBots = async () => {\n      try {\n        const data = await fetchBotConfigurations();\n        setBots(data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadBots();\n  }, []);\n  const handleUpdateConfig = async (botId, config) => {\n    try {\n      const updatedBot = await updateBotConfiguration(botId, config);\n      setBots(prev => prev.map(b => b.id === botId ? updatedBot : b));\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading bot configurations...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bot Configuration\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.botsGrid,\n      children: bots.map(bot => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.botCard,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: bot.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(BotConfigForm, {\n          bot: bot,\n          onUpdate: handleUpdateConfig\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)]\n      }, bot.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(BotConfigPage, \"tFc7vkTiKvr/UNwu3Z58svz+Tvw=\");\n_c = BotConfigPage;\nexport default BotConfigPage;\nvar _c;\n$RefreshReg$(_c, \"BotConfigPage\");","map":{"version":3,"names":["React","useState","useEffect","fetchBotConfigurations","updateBotConfiguration","BotConfigForm","styles","jsxDEV","_jsxDEV","BotConfigPage","_s","bots","setBots","loading","setLoading","error","setError","loadBots","data","err","message","handleUpdateConfig","botId","config","updatedBot","prev","map","b","id","children","fileName","_jsxFileName","lineNumber","columnNumber","className","container","botsGrid","bot","botCard","name","onUpdate","_c","$RefreshReg$"],"sources":["/Users/kwamebaffoe/Desktop/BotFles/ForexTradingSystem/frontend/src/pages/BotConfigPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchBotConfigurations, updateBotConfiguration } from '../services/apiService';\nimport BotConfigForm from '../components/BotConfigForm';\nimport styles from '../styles/botConfig.module.css';\n\nconst BotConfigPage = () => {\n  const [bots, setBots] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const loadBots = async () => {\n      try {\n        const data = await fetchBotConfigurations();\n        setBots(data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadBots();\n  }, []);\n\n  const handleUpdateConfig = async (botId, config) => {\n    try {\n      const updatedBot = await updateBotConfiguration(botId, config);\n      setBots(prev => prev.map(b => \n        b.id === botId ? updatedBot : b\n      ));\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  if (loading) return <div>Loading bot configurations...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <div className={styles.container}>\n      <h1>Bot Configuration</h1>\n      \n      <div className={styles.botsGrid}>\n        {bots.map(bot => (\n          <div key={bot.id} className={styles.botCard}>\n            <h3>{bot.name}</h3>\n            <BotConfigForm \n              bot={bot}\n              onUpdate={handleUpdateConfig}\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default BotConfigPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}