{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Dashboard\nexport const fetchDashboardData = async () => {\n  try {\n    const response = await apiClient.get('/dashboard');\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch dashboard data');\n  }\n};\n\n// News Feed\nexport const fetchNewsFeed = async (page = 1, limit = 10) => {\n  try {\n    const response = await apiClient.get('/news', {\n      params: {\n        page,\n        limit\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch news feed');\n  }\n};\n\n// Analytics\nexport const fetchAnalytics = async () => {\n  try {\n    const response = await apiClient.get('/analytics');\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch analytics');\n  }\n};\nexport const fetchAnalyticsData = async (timeframe = '1d') => {\n  try {\n    const response = await apiClient.get('/analytics', {\n      params: {\n        timeframe\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch analytics data');\n  }\n};\n\n// Bot Configuration\nexport const fetchBotConfigurations = async () => {\n  try {\n    const response = await apiClient.get('/bots');\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch bot configurations');\n  }\n};\nexport const updateBotConfiguration = async (botId, config) => {\n  try {\n    const response = await apiClient.put(`/bots/${botId}`, config);\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to update bot configuration');\n  }\n};\n\n// Portfolio\nexport const fetchPortfolioData = async () => {\n  try {\n    const response = await apiClient.get('/portfolio');\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch portfolio data');\n  }\n};\nexport const executeTrade = async tradeData => {\n  try {\n    const response = await apiClient.post('/portfolio/trades', tradeData);\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to execute trade');\n  }\n};\n\n// Research\nexport const fetchMarketResearch = async (symbol, timeframe) => {\n  try {\n    const response = await apiClient.get('/research', {\n      params: {\n        symbol,\n        timeframe\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch market research');\n  }\n};\n\n// WebSocket connection\nexport const connectWebSocket = onMessage => {\n  const ws = new WebSocket('ws://localhost:5000/ws');\n  ws.onmessage = event => {\n    const data = JSON.parse(event.data);\n    onMessage(data);\n  };\n  return ws;\n};","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","headers","fetchDashboardData","response","get","data","error","Error","fetchNewsFeed","page","limit","params","fetchAnalytics","fetchAnalyticsData","timeframe","fetchBotConfigurations","updateBotConfiguration","botId","config","put","fetchPortfolioData","executeTrade","tradeData","post","fetchMarketResearch","symbol","connectWebSocket","onMessage","ws","WebSocket","onmessage","event","JSON","parse"],"sources":["/Users/kwamebaffoe/Desktop/BotFles/ForexTradingSystem/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Dashboard\nexport const fetchDashboardData = async () => {\n  try {\n    const response = await apiClient.get('/dashboard');\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch dashboard data');\n  }\n};\n\n// News Feed\nexport const fetchNewsFeed = async (page = 1, limit = 10) => {\n  try {\n    const response = await apiClient.get('/news', {\n      params: { page, limit }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch news feed');\n  }\n};\n\n// Analytics\nexport const fetchAnalytics = async () => {\n  try {\n    const response = await apiClient.get('/analytics');\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch analytics');\n  }\n};\n\nexport const fetchAnalyticsData = async (timeframe = '1d') => {\n  try {\n    const response = await apiClient.get('/analytics', {\n      params: { timeframe }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch analytics data');\n  }\n};\n\n// Bot Configuration\nexport const fetchBotConfigurations = async () => {\n  try {\n    const response = await apiClient.get('/bots');\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch bot configurations');\n  }\n};\n\nexport const updateBotConfiguration = async (botId, config) => {\n  try {\n    const response = await apiClient.put(`/bots/${botId}`, config);\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to update bot configuration');\n  }\n};\n\n// Portfolio\nexport const fetchPortfolioData = async () => {\n  try {\n    const response = await apiClient.get('/portfolio');\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch portfolio data');\n  }\n};\n\nexport const executeTrade = async (tradeData) => {\n  try {\n    const response = await apiClient.post('/portfolio/trades', tradeData);\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to execute trade');\n  }\n};\n\n// Research\nexport const fetchMarketResearch = async (symbol, timeframe) => {\n  try {\n    const response = await apiClient.get('/research', {\n      params: { symbol, timeframe }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch market research');\n  }\n};\n\n// WebSocket connection\nexport const connectWebSocket = (onMessage) => {\n  const ws = new WebSocket('ws://localhost:5000/ws');\n  \n  ws.onmessage = (event) => {\n    const data = JSON.parse(event.data);\n    onMessage(data);\n  };\n\n  return ws;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}